import Cookies from 'js-cookie';

const spotifyApi = 'https://api.spotify.com/v1/';
export const createTempPlaylist = (spotifyUserID) => {
  const authToken = Cookies.get('spotifyAuthToken');
  return fetch(`${spotifyApi}users/${spotifyUserID}/playlists`, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${authToken}`,
    },
    body: JSON.stringify({
      name: 'Soundtrip Temp Playlist',
      description:
        'This is your temporary playlist generated by Soundtrip.app. This playlist will dissappear when you logout of Soundtrip.',
      public: false,
    }),
  })
    .then((response) => response.json())
    .then((data) => data.id)
    .catch((error) => {
      console.error('Error:', error);
    });
};

export const deleteTempPlaylist = (playlist_id) => {
  const authToken = Cookies.get('spotifyAuthToken');
  return fetch(`${spotifyApi}playlists/${playlist_id}/followers`, {
    method: 'DELETE',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${authToken}`,
    },
  })
    .then(() => {
      console.log('Success: playlist deleted');
    })
    .catch((error) => {
      console.error('Error:', error);
    });
};

//range length will be dynamic as will tracklist
export const replacePlaylistTracks = (playlist_id, tracks) => {
  const authToken = Cookies.get('spotifyAuthToken');

  return fetch(`${spotifyApi}playlists/${playlist_id}/tracks?uris=${tracks}`, {
    method: 'PUT',
    body: JSON.stringify({
      range_start: 1,
      insert_before: 1,
      range_length: 5,
    }),
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${authToken}`,
    },
  })
    .then(() => {
      console.log('Success: playlist tracks replaces');
    })
    .catch((error) => {
      console.error('Error:', error);
    });
};

export const getArtistId = async (artistName) => {
  const authToken = Cookies.get('spotifyAuthToken');

  const response = await fetch(
    `${spotifyApi}search?q=${artistName}&type=artist&limit=1`,
    {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        Authorization: `Bearer ${authToken}`,
      },
    }
  );
  const data = await response.json();
  if (data.artists.items[0]) {
    return data.artists.items[0].id;
  } else {
    return;
  }
};

export const getArtistsTopSongs = async (artistId) => {
  const authToken = Cookies.get('spotifyAuthToken');
  const response = await fetch(
    `${spotifyApi}artists/${artistId}/top-tracks?market=CA`,
    {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        Authorization: `Bearer ${authToken}`,
      },
    }
  );
  const data = await response.json();
  if (data.tracks) {
    const firstThree = data.tracks.slice(0, 3);
    let trackList = [];
    firstThree.forEach((item) => {
      trackList.push(item.uri);
    });

    return trackList.join(',');
  } else {
    return;
  }
};

//NOT USING THIS CURRENTLY
//get list of tracks from spotify based on keyword search e.g. madonna my bring back song name Madonna not artist
export const setPlaylistTrackListByKeyword = async (currentArtists) => {
  const authToken = Cookies.get('spotifyAuthToken');

  const trackUris = await Promise.all(
    currentArtists.map(async (artist) => {
      const response = await fetch(
        `${spotifyApi}search?q=${artist}&type=track&market=CA&limit=2`,
        {
          method: 'GET',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      const data = await response.json();
      let trackList = [];
      data.tracks.items.forEach((item) => {
        trackList.push(item.uri);
      });

      const formattedString = trackList.join(',');
      return formattedString;
    })
  );

  return trackUris.join(',');
};
